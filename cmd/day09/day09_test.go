package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestParseInput(t *testing.T) {
	assert.Equal(t, []string{"0", ".", ".", "1", "1", "1", ".", ".", ".", ".", "2", "2", "2", "2", "2"}, parseInput("12345"))
	assert.Equal(t, []string{"0", "0", ".", ".", ".", "1", "1", "1", ".", ".", ".", "2", ".", ".", ".", "3", "3", "3", ".", "4", "4", ".",
		"5", "5", "5", "5", ".", "6", "6", "6", "6", ".", "7", "7", "7", ".", "8", "8", "8", "8", "9", "9"},
		parseInput("2333133121414131402"))
}

func TestSwapData(t *testing.T) {
	assert.Equal(t, []string{"s", "o", "n", "a", "j"}, swapData([]string{"j", "o", "n", "a", "s"}, 0, 4))
	assert.Equal(t, []string{"j", "o", "a", "n", "s"}, swapData([]string{"j", "o", "n", "a", "s"}, 2, 3))
}

func TestMoveRightMost(t *testing.T) {
	value1, swapped1 := moveRightMost([]string{"0", ".", ".", "1", "1", "1", ".", ".", ".", ".", "2", "2", "2", "2", "2"})
	assert.Equal(t, []string{"0", "2", ".", "1", "1", "1", ".", ".", ".", ".", "2", "2", "2", "2", "."}, value1)
	assert.True(t, swapped1)
	value5, swapped5 := moveRightMost([]string{"0", "2", "2", "1", "1", "1", "2", "2", "2", ".", ".", ".", ".", ".", ".", "."})
	assert.Equal(t, []string{"0", "2", "2", "1", "1", "1", "2", "2", "2", ".", ".", ".", ".", ".", ".", "."}, value5)
	assert.False(t, swapped5)
}

func TestCalculateChecksum(t *testing.T) {
	assert.Equal(t, uint64(1928), calculateChecksum([]string{
		"0", "0", "9", "9", "8", "1", "1", "1", "8", "8", "8", "2", "7", "7", "7", "3", "3", "3",
		"6", "4", "4", "6", "5", "5", "5", "5", "6", "6", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}))
}

func TestProcess(t *testing.T) {
	assert.Equal(t, uint64(1928), process("2333133121414131402"))
}

func TestGetDataSize(t *testing.T) {
	assert.Equal(t, 5, getDataSize([]string{"0", ".", ".", "1", "1", "1", ".", ".", ".", ".", "2", "2", "2", "2", "2"}, 14))
}

func TestGetEmptySize(t *testing.T) {
	assert.Equal(t, 4, getEmptySize([]string{"0", ".", ".", "1", "1", "1", ".", ".", ".", ".", "2", "2", "2", "2", "2"}, 6))
}

func TestMoveRightMostMany(t *testing.T) {
	assert.Equal(t, []string{"0", "0", "9", "9", ".", "1", "1", "1", ".", ".", ".", "2", ".", ".", ".", "3", "3", "3", ".", "4", "4", ".",
		"5", "5", "5", "5", ".", "6", "6", "6", "6", ".", "7", "7", "7", ".", "8", "8", "8", "8", ".", "."},
		moveRightMostMany([]string{"0", "0", ".", ".", ".", "1", "1", "1", ".", ".", ".", "2", ".", ".", ".", "3", "3", "3", ".", "4", "4", ".",
			"5", "5", "5", "5", ".", "6", "6", "6", "6", ".", "7", "7", "7", ".", "8", "8", "8", "8", "9", "9"}, 9))
	assert.Equal(t, []string{"0", "0", "9", "9", ".", "1", "1", "1", ".", ".", ".", "2", ".", ".", ".", "3", "3", "3", ".", "4", "4", ".",
		"5", "5", "5", "5", ".", "6", "6", "6", "6", ".", "7", "7", "7", ".", "8", "8", "8", "8", ".", "."},
		moveRightMostMany([]string{"0", "0", "9", "9", ".", "1", "1", "1", ".", ".", ".", "2", ".", ".", ".", "3", "3", "3", ".", "4", "4", ".",
			"5", "5", "5", "5", ".", "6", "6", "6", "6", ".", "7", "7", "7", ".", "8", "8", "8", "8", ".", "."}, 8))
	assert.Equal(t, []string{"0", "0", "9", "9", ".", "1", "1", "1", "7", "7", "7", "2", ".", ".", ".", "3", "3", "3", ".", "4", "4", ".",
		"5", "5", "5", "5", ".", "6", "6", "6", "6", ".", ".", ".", ".", ".", "8", "8", "8", "8", ".", "."},
		moveRightMostMany([]string{"0", "0", "9", "9", ".", "1", "1", "1", ".", ".", ".", "2", ".", ".", ".", "3", "3", "3", ".", "4", "4", ".",
			"5", "5", "5", "5", ".", "6", "6", "6", "6", ".", "7", "7", "7", ".", "8", "8", "8", "8", ".", "."}, 7))
}

func TestProcessPart2(t *testing.T) {
	assert.Equal(t, uint64(2858), processPart2("2333133121414131402"))
}
